datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?   @unique
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  rating        Rating[]
  sold          Sold[]
  Cart          Cart[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String?
  price     Int?
  category  Category?
  desc      String?
  createdAt DateTime  @default(now())
  rating    Rating[]
  sold      Sold[]
  image     Image[]
  Cart      Cart[]
}

enum Category {
  Kitchen
  Living_Room @map("Living Room")
  Bed_Room    @map("Bed Room")
}

model Rating {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  userId    String?  @db.ObjectId
  rating    Int
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  User      User?    @relation(fields: [userId], references: [id])
}

model Sold {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  userId    String?  @db.ObjectId
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  User      User?    @relation(fields: [userId], references: [id])
}

model Image {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String?  @db.ObjectId
  image     String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Cart {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String?  @db.ObjectId
  userId    String?  @db.ObjectId
  total     Int?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
